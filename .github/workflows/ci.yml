name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  QT_VERSION: '6.5.3'
  CMAKE_VERSION: '3.27.7'

jobs:
  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format
      run: sudo apt-get update && sudo apt-get install -y clang-format
    
    - name: Check code formatting
      continue-on-error: true
      run: |
        echo "Checking code formatting..."
        find . -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "⚠️ Code formatting issues found. Run 'clang-format -i \$(find . -name \"*.cpp\" -o -name \"*.h\")' to fix."
    
    - name: Install cppcheck
      run: sudo apt-get install -y cppcheck
    
    - name: Run static analysis
      continue-on-error: true
      run: |
        echo "Running static analysis with cppcheck..."
        cppcheck --enable=all --error-exitcode=0 \
          --suppress=missingIncludeSystem \
          --suppress=missingInclude \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --suppress=unknownMacro \
          --suppress=checkersReport \
          --inline-suppr \
          -I include/ \
          src/ include/ tests/ || echo "⚠️ Static analysis found issues. Review cppcheck output above."

  # Build matrix for multiple platforms
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            qt_arch: gcc_64
            cmake_generator: "Unix Makefiles"
            package_suffix: "linux-x64"
          - os: windows-latest
            qt_arch: win64_msvc2019_64
            cmake_generator: "Visual Studio 17 2022"
            package_suffix: "windows-x64"

    steps:
    - uses: actions/checkout@v4

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v3
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache-${{ env.QT_VERSION }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: ${{ matrix.qt_arch }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        modules: 'qtmultimedia'

    # Platform-specific dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libvlc-dev \
          libvlccore-dev \
          vlc \
          libva-dev \
          libvdpau-dev \
          libx11-dev \
          libasound2-dev \
          libpulse-dev



    - name: Verify Windows VLC Stubs
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Verifying VLC stub files..."
        if (Test-Path "third_party\vlc\include\vlc\vlc.h") {
            Write-Host "✓ VLC header found"
        } else {
            Write-Error "✗ VLC header missing"
            exit 1
        }
        
        if (Test-Path "third_party\vlc\lib\libvlc.lib") {
            Write-Host "✓ VLC library found"
        } else {
            Write-Error "✗ VLC library missing"
            exit 1
        }
        
        Write-Host "VLC stub files verified successfully"
      shell: powershell

    - name: Configure CMake
      run: |
        cmake -B build -S . -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF

    - name: Build
      run: cmake --build build --config Release --parallel

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure --parallel --build-config Release

    - name: Package Application
      run: |
        cmake --build build --target package --config Release

    - name: Prepare Distribution Directory
      run: |
        mkdir -p dist
        # Copy executables and dependencies based on platform
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows executable and required DLLs
          cp build/Release/EonPlay.exe dist/ || cp build/EonPlay.exe dist/
          # Deploy Qt dependencies
          if command -v windeployqt &> /dev/null; then
            windeployqt dist/EonPlay.exe
          fi
          # Copy VLC DLLs if available
          find third_party/vlc -name "*.dll" -exec cp {} dist/ \; 2>/dev/null || true
          find build -name "*.dll" -exec cp {} dist/ \; || true
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          # Linux executable
          cp build/EonPlay dist/
          chmod +x dist/EonPlay
          # Copy shared libraries if needed
          ldd build/EonPlay | grep "=> /" | awk '{print $3}' | grep -E "(Qt|vlc)" | xargs -I {} cp {} dist/ 2>/dev/null || true
        fi
        
        # Create download instructions
        echo "EonPlay - Timeless Media Player - Portable Build" > dist/README.txt
        echo "===============================================" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "Platform: ${{ matrix.os }}" >> dist/README.txt
        echo "Build Date: $(date)" >> dist/README.txt
        echo "Commit: ${{ github.sha }}" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "Installation:" >> dist/README.txt
        echo "1. Extract all files to a folder" >> dist/README.txt
        echo "2. Run the executable directly (no installation required)" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "System Requirements:" >> dist/README.txt
        echo "- Qt 6.5.3 runtime libraries" >> dist/README.txt
        echo "- VLC Media Player 3.0 or later" >> dist/README.txt
        echo "- Hardware acceleration support (optional)" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "Download URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> dist/README.txt
        
        # List contents for verification
        echo "Distribution contents:"
        ls -la dist/
      shell: bash

    - name: Upload Executable Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: EonPlay-${{ matrix.package_suffix }}-Artifacts
        path: |
          dist/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: media-player-packages-${{ matrix.package_suffix }}
        path: |
          build/*.zip
          build/*.tar.gz
          build/*.dmg
          build/*.msi
          build/*.deb
          build/*.rpm
        retention-days: 30
        if-no-files-found: ignore

    - name: Generate Artifact URLs
      id: generate-urls
      run: |
        # Generate artifact download URLs
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        RUN_ID="${{ github.run_id }}"
        
        # Construct artifact URL
        ARTIFACT_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/actions/runs/${RUN_ID}"
        
        echo "🚀 Build completed for ${{ matrix.os }}!"
        echo "📦 Executable Artifact: EonPlay-${{ matrix.package_suffix }}-Artifacts"
        echo "📦 Package Artifact: media-player-packages-${{ matrix.package_suffix }}"
        echo "🔗 Download URL: $ARTIFACT_URL"
        
        # Output for other steps
        echo "artifact-url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
        echo "executable-artifact=EonPlay-${{ matrix.package_suffix }}-Artifacts" >> $GITHUB_OUTPUT
        echo "package-artifact=media-player-packages-${{ matrix.package_suffix }}" >> $GITHUB_OUTPUT
      shell: bash

  # Test coverage analysis
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: gcc_64
        modules: 'qtmultimedia'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libvlc-dev \
          libvlccore-dev \
          vlc \
          gcc \
          lcov

    - name: Configure with coverage
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -DBUILD_TESTING=ON

    - name: Build with coverage
      run: cmake --build build --parallel

    - name: Run tests with coverage
      run: |
        cd build
        ctest --output-on-failure --parallel

    - name: Generate coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/Qt/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella

  # Documentation generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: read
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Doxygen
      run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

    - name: Create docs directory
      run: |
        mkdir -p docs/doxygen/html
        echo "<html><body><h1>EonPlay Documentation</h1><p>Documentation will be generated here.</p></body></html>" > docs/doxygen/html/index.html

    - name: Generate documentation
      continue-on-error: true
      run: |
        if [ -f "Doxyfile" ]; then
          doxygen Doxyfile || echo "⚠️ Doxygen generation failed, using placeholder"
        else
          echo "⚠️ No Doxyfile found, using placeholder documentation"
        fi

    - name: Deploy to GitHub Pages
      continue-on-error: true
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/doxygen/html
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Install Qt (for CodeQL)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: gcc_64
        modules: 'qtmultimedia'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvlc-dev libvlccore-dev vlc

    - name: Build for CodeQL
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Release deployment
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build, coverage, security]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release assets
      run: |
        mkdir release-assets
        find . -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" -o -name "*.msi" -o -name "*.deb" -o -name "*.rpm" | \
          xargs -I {} cp {} release-assets/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify deployment
      run: |
        echo "Release ${{ github.event.release.tag_name }} deployed successfully!"
        echo "Assets uploaded: $(ls -la release-assets/)"

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: gcc_64
        modules: 'qtmultimedia'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvlc-dev libvlccore-dev vlc

    - name: Build benchmarks
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_BENCHMARKS=ON
        cmake --build build --parallel

    - name: Run benchmarks
      run: |
        cd build
        ./benchmarks/playback_benchmark --benchmark_format=json > benchmark_results.json

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'googlecpp'
        output-file-path: build/benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  # Artifact Summary
  artifact-summary:
    name: Artifact Summary
    runs-on: ubuntu-latest
    needs: [build, coverage]
    if: always()
    steps:
    - name: Create Artifact Summary
      run: |
        echo "# 🚀 EonPlay - Timeless Media Player - Build Artifacts" > artifact_summary.md
        echo "" >> artifact_summary.md
        echo "## Build Information" >> artifact_summary.md
        echo "- **Workflow**: ${{ github.workflow }}" >> artifact_summary.md
        echo "- **Run ID**: ${{ github.run_id }}" >> artifact_summary.md
        echo "- **Commit**: ${{ github.sha }}" >> artifact_summary.md
        echo "- **Branch**: ${{ github.ref_name }}" >> artifact_summary.md
        echo "- **Triggered by**: ${{ github.event_name }}" >> artifact_summary.md
        echo "- **Build Date**: $(date -u)" >> artifact_summary.md
        echo "" >> artifact_summary.md
        echo "## 📦 Executable Artifacts (Ready to Run)" >> artifact_summary.md
        echo "" >> artifact_summary.md
        echo "### 🪟 Windows Executable" >> artifact_summary.md
        echo "**Artifact Name**: \`EonPlay-windows-x64-Artifacts\`" >> artifact_summary.md
        echo "**Contains**: EonPlay.exe + all DLLs" >> artifact_summary.md
        echo "**Download**: [Click here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> artifact_summary.md
        echo "" >> artifact_summary.md
        echo "### 🐧 Linux Executable" >> artifact_summary.md
        echo "**Artifact Name**: \`EonPlay-linux-x64-Artifacts\`" >> artifact_summary.md
        echo "**Contains**: EonPlay + shared libraries" >> artifact_summary.md
        echo "**Download**: [Click here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> artifact_summary.md
        echo "" >> artifact_summary.md

        echo "## 🔗 Quick Access" >> artifact_summary.md
        echo "**Direct Actions Page**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> artifact_summary.md
        echo "" >> artifact_summary.md
        echo "## 📖 Usage Instructions" >> artifact_summary.md
        echo "1. Click the executable artifact link above" >> artifact_summary.md
        echo "2. Scroll to \"Artifacts\" section on the Actions page" >> artifact_summary.md
        echo "3. Download the artifact zip for your platform" >> artifact_summary.md
        echo "4. Extract all files to a folder" >> artifact_summary.md
        echo "5. Run the executable directly (no installation needed)" >> artifact_summary.md
        echo "" >> artifact_summary.md
        echo "## 🛠️ Advanced Features Included" >> artifact_summary.md
        echo "- Fast forward/rewind with speed control" >> artifact_summary.md
        echo "- Loop/repeat and shuffle playback modes" >> artifact_summary.md
        echo "- Resume from last position functionality" >> artifact_summary.md
        echo "- Frame-by-frame stepping for video" >> artifact_summary.md
        echo "- Crossfade between tracks" >> artifact_summary.md
        echo "- Gapless playback support" >> artifact_summary.md
        echo "- Thumbnail seek preview functionality" >> artifact_summary.md
        
        echo "## 📦 Build Artifacts Summary" >> $GITHUB_STEP_SUMMARY
        cat artifact_summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Build-Summary-Report
        path: artifact_summary.md
        retention-days: 30
        if-no-files-found: warn

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const runId = context.runId;
          const repo = context.repo;
          
          const comment = `## 🚀 EonPlay - Timeless Media Player Build Complete!
          
          Your executables and packages have been built successfully:
          
          ### 📦 Ready-to-Run Executables
          - **Windows**: [EonPlay-windows-x64-Artifacts](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})
          - **Linux**: [EonPlay-linux-x64-Artifacts](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})

          
          ### 📋 Installation Packages
          - **Windows**: media-player-packages-windows-x64 (.msi installer)
          - **Linux**: media-player-packages-linux-x64 (.deb, .rpm packages)

          
          ### 🔗 How to Download
          1. Click any link above to go to the Actions page
          2. Scroll to the "Artifacts" section
          3. Download the zip file for your platform
          4. Extract and run (executables) or install (packages)
          
          **Build Info**: Commit ${context.sha.substring(0, 7)} | Run #${runId}
          **Features**: All advanced playback features included!`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: repo.owner,
            repo: repo.repo,
            body: comment
          });
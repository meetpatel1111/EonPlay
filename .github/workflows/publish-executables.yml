name: Publish Executables

on:
  workflow_dispatch:

env:
  QT_VERSION: '6.5.3'

jobs:
  build-and-publish:
    name: Build and Publish Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            qt_arch: win64_msvc2019_64
            executable_name: "EonPlay.exe"
            artifact_name: "EonPlay-Windows-x64"
          - os: ubuntu-latest
            qt_arch: gcc_64
            executable_name: "EonPlay"
            artifact_name: "EonPlay-Linux-x64"
          - os: macos-latest
            qt_arch: clang_64
            executable_name: "EonPlay"
            artifact_name: "EonPlay-macOS-x64"

    outputs:
      artifact-url-windows: ${{ steps.upload-windows.outputs.artifact-url }}
      artifact-url-linux: ${{ steps.upload-linux.outputs.artifact-url }}
      artifact-url-macos: ${{ steps.upload-macos.outputs.artifact-url }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        arch: ${{ matrix.qt_arch }}
        modules: 'qtmultimedia'

    # Platform-specific dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libvlc-dev \
          libvlccore-dev \
          vlc \
          libva-dev \
          libvdpau-dev \
          libx11-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install vlc
        brew install pkg-config

    - name: Setup Windows VLC
      if: matrix.os == 'windows-latest'
      run: |
        # Download VLC SDK
        Invoke-WebRequest -Uri "https://download.videolan.org/pub/videolan/vlc/3.0.18/win64/vlc-3.0.18-win64.zip" -OutFile "vlc.zip"
        Expand-Archive -Path "vlc.zip" -DestinationPath "."
        mkdir third_party
        Move-Item "vlc-3.0.18" "third_party/vlc"
      shell: powershell

    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF

    - name: Build
      run: cmake --build build --config Release --parallel

    - name: Prepare Distribution Directory
      run: |
        mkdir -p dist
        # Copy executable based on platform
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows executable and required DLLs
          cp build/Release/${{ matrix.executable_name }} dist/ || cp build/${{ matrix.executable_name }} dist/
          # Copy Qt DLLs and other dependencies
          find build -name "*.dll" -exec cp {} dist/ \; || true
          # Copy VLC DLLs if available
          find third_party/vlc -name "*.dll" -exec cp {} dist/ \; 2>/dev/null || true
        else
          # Linux/macOS executable
          cp build/${{ matrix.executable_name }} dist/
          chmod +x dist/${{ matrix.executable_name }}
        fi
        
        # List contents for verification
        ls -la dist/
      shell: bash

    - name: Upload Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      id: upload-windows
      uses: actions/upload-artifact@v5
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      id: upload-linux
      uses: actions/upload-artifact@v5
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Artifacts (macOS)
      if: matrix.os == 'macos-latest'
      id: upload-macos
      uses: actions/upload-artifact@v5
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
        retention-days: 30
        if-no-files-found: warn

    - name: Generate Artifact URLs
      id: generate-urls
      run: |
        # Generate artifact download URLs
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        RUN_ID="${{ github.run_id }}"
        
        # Construct artifact URL
        ARTIFACT_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/actions/runs/${RUN_ID}"
        
        echo "Artifact URL: $ARTIFACT_URL"
        echo "artifact-url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
        
        # Also output platform-specific info
        echo "Platform: ${{ matrix.os }}"
        echo "Executable: ${{ matrix.executable_name }}"
        echo "Artifact Name: ${{ matrix.artifact_name }}"
      shell: bash

    - name: Create Download Instructions
      run: |
        cat > dist/DOWNLOAD_INSTRUCTIONS.md << 'EOF'
        # Download Instructions
        
        ## Artifact Information
        - **Platform**: ${{ matrix.os }}
        - **Executable**: ${{ matrix.executable_name }}
        - **Artifact Name**: ${{ matrix.artifact_name }}
        - **Build Date**: $(date)
        - **Commit**: ${{ github.sha }}
        
        ## Download URL
        Visit the GitHub Actions run page to download the artifact:
        https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        ## Installation
        1. Download the artifact zip file
        2. Extract the contents
        3. Run the executable directly (no installation required)
        
        ## System Requirements
        - Qt 6.5.3 or later runtime libraries
        - VLC Media Player 3.0 or later
        - Hardware acceleration support (optional)
        
        ## Troubleshooting
        If the executable doesn't run:
        - Ensure Qt runtime libraries are installed
        - Install VLC Media Player
        - Check that all DLL dependencies are present
        EOF
      shell: bash

  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: always()
    steps:
    - name: Create Summary Report
      run: |
        cat > artifact_summary.md << 'EOF'
        # 🚀 EonPlay - Timeless Media Player Build Summary
        
        ## Build Status
        - **Workflow**: ${{ github.workflow }}
        - **Run ID**: ${{ github.run_id }}
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Triggered by**: ${{ github.event_name }}
        
        ## Artifact Download Links
        
        ### 🪟 Windows Executable
        **Artifact Name**: EonPlay-Windows-x64
        **Download**: [Click here to download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ### 🐧 Linux Executable  
        **Artifact Name**: EonPlay-Linux-x64
        **Download**: [Click here to download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ### 🍎 macOS Executable
        **Artifact Name**: EonPlay-macOS-x64
        **Download**: [Click here to download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ## Quick Access
        **Direct Actions Page**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        ## Usage Instructions
        1. Click on the download link above
        2. Scroll down to the "Artifacts" section
        3. Click on your platform's artifact to download
        4. Extract the zip file
        5. Run the executable directly
        
        ## Notes
        - Artifacts are retained for 30 days
        - No installation required - portable executables
        - All dependencies included where possible
        EOF
        
        echo "## 📦 Artifact Summary" >> $GITHUB_STEP_SUMMARY
        cat artifact_summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Summary
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: Build-Summary
        path: artifact_summary.md
        retention-days: 30
        if-no-files-found: warn

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const runId = context.runId;
          const repo = context.repo;
          
          const comment = `## 🚀 EonPlay Build Complete!
          
          Your executables have been built and are ready for download:
          
          ### Download Links
          - **Windows**: [EonPlay-Windows-x64](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})
          - **Linux**: [EonPlay-Linux-x64](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})
          - **macOS**: [EonPlay-macOS-x64](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId})
          
          ### How to Download
          1. Click the link above for your platform
          2. Scroll to the "Artifacts" section
          3. Download the zip file
          4. Extract and run the executable
          
          **Build Info**: Commit ${context.sha.substring(0, 7)} | Run #${runId}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: repo.owner,
            repo: repo.repo,
            body: comment
          });